# Tela de Participantes do Curso

## üìã Resumo da Implementa√ß√£o

Implementa√ß√£o completa da funcionalidade de gerenciamento de participantes do curso, permitindo visualizar, adicionar e remover usu√°rios de uma disciplina.

## ‚ú® Funcionalidades Implementadas

### 1. **Listar Participantes**
- ‚úÖ Exibi√ß√£o em cards responsivos
- ‚úÖ Informa√ß√µes mostradas: Nome, E-mail, Cargo
- ‚úÖ Avatar com inicial do nome
- ‚úÖ Design moderno com hover effects
- ‚úÖ Estado de loading durante carregamento
- ‚úÖ Mensagem quando n√£o h√° participantes

### 2. **Adicionar Participante (Monitor)**
- ‚úÖ Bot√£o "Adicionar Participante" vis√≠vel apenas para monitores
- ‚úÖ Modal de busca por e-mail
- ‚úÖ Valida√ß√µes:
  - Verifica se usu√°rio existe no sistema
  - Verifica se j√° est√° matriculado no curso
  - Mensagens de erro claras
- ‚úÖ Tela de confirma√ß√£o com preview dos dados do usu√°rio
- ‚úÖ Integra√ß√£o preparada com banco de dados

### 3. **Remover Participantes (Monitor)**
- ‚úÖ Bot√£o "Remover Participantes" vis√≠vel apenas para monitores
- ‚úÖ Modal de sele√ß√£o com checkboxes
- ‚úÖ Permite remover m√∫ltiplos participantes de uma vez
- ‚úÖ Tela de confirma√ß√£o listando usu√°rios a serem removidos
- ‚úÖ Aviso visual sobre a a√ß√£o
- ‚úÖ Integra√ß√£o preparada com banco de dados

## üóÑÔ∏è Integra√ß√£o com Banco de Dados

### Endpoints Necess√°rios

#### 1. **Listar Participantes de um Curso**
```javascript
// GET /api/usuarios-em-curso?curso_id={id}
// Retorna array de participantes com dados do usu√°rio

// Resposta esperada:
[
  {
    "id": 1,
    "usuario_id": 1,
    "curso_id": 1,
    "usuario_nome": "Jo√£o Silva",
    "usuario_email": "joao@email.com",
    "cargo": "monitor"
  }
]
```

**Query SQL sugerida:**
```sql
SELECT 
  uec.ID as id,
  uec.usuario_id,
  uec.curso_id,
  u.nome as usuario_nome,
  u.email as usuario_email,
  u.cargo
FROM UsuariosEmCurso uec
JOIN Usuarios u ON uec.usuario_id = u.ID
WHERE uec.curso_id = $1
ORDER BY u.nome ASC;
```

#### 2. **Buscar Usu√°rio por E-mail**
```javascript
// GET /api/usuarios?email={email}
// Retorna array com usu√°rio encontrado

// Resposta esperada:
[
  {
    "id": 5,
    "nome": "Maria Santos",
    "email": "maria@email.com",
    "cargo": "aluno"
  }
]
```

**Query SQL sugerida:**
```sql
SELECT ID as id, nome, email, cargo
FROM Usuarios
WHERE email = $1;
```

#### 3. **Adicionar Participante ao Curso**
```javascript
// POST /api/usuarios-em-curso
// Body: { "usuario_id": 5, "curso_id": 1 }

// Resposta esperada:
{
  "id": 10,
  "usuario_id": 5,
  "curso_id": 1
}
```

**Implementa√ß√£o sugerida (backend/routes/usuarioemcurso.js):**
```javascript
// J√° existe endpoint POST, mas validar:
router.post('/', async (req, res) => {
  const { usuario_id, curso_id } = req.body;
  
  if (!usuario_id || !curso_id) {
    return res.status(400).json({ 
      error: 'Usuario_id e curso_id s√£o obrigat√≥rios' 
    });
  }

  try {
    // Verificar se j√° existe
    const existente = await pool.query(
      'SELECT * FROM UsuariosEmCurso WHERE usuario_id=$1 AND curso_id=$2',
      [usuario_id, curso_id]
    );
    
    if (existente.rows.length > 0) {
      return res.status(400).json({ 
        error: 'Usu√°rio j√° est√° matriculado neste curso' 
      });
    }

    // Inserir
    const result = await pool.query(
      'INSERT INTO UsuariosEmCurso (usuario_id, curso_id) VALUES ($1, $2) RETURNING *',
      [usuario_id, curso_id]
    );
    
    res.status(201).json(result.rows[0]);
  } catch (error) {
    res.status(500).json({ 
      error: 'Erro ao adicionar usu√°rio ao curso', 
      details: error.message 
    });
  }
});
```

#### 4. **Remover M√∫ltiplos Participantes**
```javascript
// DELETE /api/usuarios-em-curso/bulk-delete
// Body: { "ids": [1, 2, 3] }

// Resposta esperada:
{
  "message": "3 participantes removidos com sucesso",
  "removed": [1, 2, 3]
}
```

**Implementa√ß√£o sugerida (adicionar ao backend/routes/usuarioemcurso.js):**
```javascript
// NOVO ENDPOINT - Adicionar ao arquivo
router.delete('/bulk-delete', async (req, res) => {
  const { ids } = req.body;
  
  if (!ids || !Array.isArray(ids) || ids.length === 0) {
    return res.status(400).json({ 
      error: 'Array de IDs √© obrigat√≥rio' 
    });
  }

  try {
    const placeholders = ids.map((_, i) => `$${i + 1}`).join(',');
    const query = `DELETE FROM UsuariosEmCurso WHERE ID IN (${placeholders}) RETURNING *`;
    
    const result = await pool.query(query, ids);
    
    res.status(200).json({
      message: `${result.rowCount} participantes removidos com sucesso`,
      removed: ids
    });
  } catch (error) {
    res.status(500).json({ 
      error: 'Erro ao remover participantes', 
      details: error.message 
    });
  }
});
```

### Pontos de Integra√ß√£o no Frontend

#### Arquivo: `frontend/src/tela_de_curso/Participantes.js`

**1. Carregamento de Participantes (linha ~30):**
```javascript
const fetchParticipants = async () => {
  try {
    setLoading(true);
    const response = await fetch(`/api/usuarios-em-curso?curso_id=${courseId}`);
    
    if (!response.ok) {
      throw new Error('Erro ao buscar participantes');
    }
    
    const data = await response.json();
    
    // Filtrar apenas os participantes deste curso (se a API n√£o filtrar)
    const courseParticipants = data.filter(item => 
      item.curso_id === parseInt(courseId)
    );
    
    setParticipants(courseParticipants);
    setLoading(false);
  } catch (error) {
    console.error('Erro ao buscar participantes:', error);
    setLoading(false);
    // Implementar notifica√ß√£o de erro
  }
};
```

**2. Buscar Usu√°rio por E-mail (linha ~58):**
```javascript
const handleSearchUser = async () => {
  setAddError('');
  setFoundUser(null);
  
  if (!searchEmail.trim()) {
    setAddError('Digite um e-mail para buscar');
    return;
  }

  try {
    const response = await fetch(`/api/usuarios?email=${encodeURIComponent(searchEmail)}`);
    
    if (!response.ok) {
      throw new Error('Erro ao buscar usu√°rio');
    }
    
    const users = await response.json();
    
    if (users.length === 0) {
      setAddError('Usu√°rio n√£o encontrado no sistema');
      return;
    }

    const user = users[0];
    
    // Verificar se j√° est√° no curso
    const alreadyInCourse = participants.some(p => p.usuario_id === user.id);
    if (alreadyInCourse) {
      setAddError('Este usu√°rio j√° est√° matriculado no curso');
      return;
    }

    setFoundUser(user);
    setShowAddConfirmation(true);
    
  } catch (error) {
    console.error('Erro ao buscar usu√°rio:', error);
    setAddError('Erro ao buscar usu√°rio. Tente novamente.');
  }
};
```

**3. Adicionar Participante (linha ~89):**
```javascript
const handleConfirmAdd = async () => {
  try {
    const response = await fetch('/api/usuarios-em-curso', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        usuario_id: foundUser.id,
        curso_id: parseInt(courseId)
      })
    });

    if (!response.ok) {
      const errorData = await response.json();
      setAddError(errorData.error || 'Erro ao adicionar usu√°rio ao curso');
      setShowAddConfirmation(false);
      return;
    }

    const newEntry = await response.json();
    
    // Adicionar √† lista local
    const newParticipant = {
      id: newEntry.id || newEntry.ID,
      usuario_id: foundUser.id,
      usuario_nome: foundUser.nome,
      usuario_email: foundUser.email,
      cargo: foundUser.cargo
    };
    
    setParticipants(prev => [...prev, newParticipant]);
    handleCancelAdd();
    
    // Implementar notifica√ß√£o de sucesso
    console.log('Usu√°rio adicionado com sucesso!');
    
  } catch (error) {
    console.error('Erro ao adicionar participante:', error);
    setAddError('Erro ao adicionar usu√°rio. Tente novamente.');
    setShowAddConfirmation(false);
  }
};
```

**4. Remover Participantes (linha ~145):**
```javascript
const handleConfirmRemove = async () => {
  try {
    const response = await fetch('/api/usuarios-em-curso/bulk-delete', {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ ids: selectedForRemoval })
    });

    if (!response.ok) {
      throw new Error('Erro ao remover participantes');
    }

    // Remover da lista local
    setParticipants(prev => 
      prev.filter(p => !selectedForRemoval.includes(p.id))
    );
    
    handleCancelRemove();
    
    // Implementar notifica√ß√£o de sucesso
    console.log(`${selectedForRemoval.length} participantes removidos com sucesso!`);
    
  } catch (error) {
    console.error('Erro ao remover participantes:', error);
    // Implementar notifica√ß√£o de erro
  }
};
```

## üìÅ Arquivos Modificados

### Arquivos Existentes
```
frontend/src/tela_de_curso/
‚îú‚îÄ‚îÄ Participantes.js      # Substituir conte√∫do completo
‚îî‚îÄ‚îÄ Participantes.css     # Criar novo arquivo
```

### Backend - Modifica√ß√µes Necess√°rias
```
backend/routes/
‚îî‚îÄ‚îÄ usuarioemcurso.js     # Adicionar endpoint bulk-delete
```

**Adicionar ao final do arquivo `usuarioemcurso.js`:**
```javascript
// DELETE /api/usuarios-em-curso/bulk-delete
router.delete('/bulk-delete', async (req, res) => {
  const { ids } = req.body;
  
  if (!ids || !Array.isArray(ids) || ids.length === 0) {
    return res.status(400).json({ error: 'Array de IDs √© obrigat√≥rio' });
  }

  try {
    const placeholders = ids.map((_, i) => `$${i + 1}`).join(',');
    const query = `DELETE FROM UsuariosEmCurso WHERE ID IN (${placeholders}) RETURNING *`;
    
    const result = await pool.query(query, ids);
    
    res.status(200).json({
      message: `${result.rowCount} participantes removidos com sucesso`,
      removed: ids
    });
  } catch (error) {
    res.status(500).json({ 
      error: 'Erro ao remover participantes', 
      details: error.message 
    });
  }
});

module.exports = router;
```

## üêô Workflow Git

### 1. Sincronizar com GitHub
```bash
cd "Projeto Engenharia de Software"
git checkout main
git pull origin main
```

### 2. Criar Branch
```bash
git checkout -b feature/tela-participantes
```

### 3. Adicionar Arquivos
```bash
# Frontend
git add frontend/src/tela_de_curso/Participantes.js
git add frontend/src/tela_de_curso/Participantes.css

# Backend (se modificar)
git add backend/routes/usuarioemcurso.js

# Documenta√ß√£o
git add README-participantes.md
```

### 4. Commit
```bash
git commit -m "feat: implementar tela de participantes do curso

- Adicionar listagem de participantes com cards responsivos
- Implementar busca e adi√ß√£o de participantes por e-mail
- Adicionar remo√ß√£o em lote de participantes
- Aplicar valida√ß√µes (usu√°rio existe, j√° matriculado)
- Criar modais de confirma√ß√£o para todas as a√ß√µes
- Implementar controle de permiss√µes (monitor/aluno)
- Preparar integra√ß√£o completa com banco de dados
- Adicionar endpoint bulk-delete no backend

Funcionalidades:
‚úÖ Listar participantes (nome, email, cargo)
‚úÖ Adicionar participante (busca por email)
‚úÖ Remover m√∫ltiplos participantes
‚úÖ Valida√ß√µes completas
‚úÖ Interface responsiva
‚úÖ Controle de permiss√µes"
```

### 5. Push
```bash
git push origin feature/tela-participantes
```

### 6. Pull Request
```markdown
## üéØ Objetivo
Implementa√ß√£o completa da tela de participantes do curso com funcionalidades de visualiza√ß√£o, adi√ß√£o e remo√ß√£o de usu√°rios.

## ‚ú® Funcionalidades
- ‚úÖ Listagem de participantes em cards
- ‚úÖ Adicionar participantes por e-mail (monitores)
- ‚úÖ Remover m√∫ltiplos participantes (monitores)
- ‚úÖ Valida√ß√µes de exist√™ncia e duplica√ß√£o
- ‚úÖ Modais de confirma√ß√£o
- ‚úÖ Interface responsiva

## üß™ Como Testar
1. Login como monitor
2. Acessar p√°gina de participantes de um curso
3. Testar adi√ß√£o de participante existente
4. Testar adi√ß√£o de e-mail inexistente
5. Testar adi√ß√£o de participante j√° matriculado
6. Testar remo√ß√£o de m√∫ltiplos participantes

## üìã Checklist
- [x] Frontend implementado
- [x] Valida√ß√µes de formul√°rio
- [x] Controle de permiss√µes
- [x] Interface responsiva
- [x] Documenta√ß√£o completa
- [ ] Endpoint bulk-delete adicionado (backend)
- [ ] Testes de integra√ß√£o
```

## üîç Valida√ß√µes Implementadas

### Adicionar Participante
1. ‚úÖ Campo e-mail n√£o pode estar vazio
2. ‚úÖ Usu√°rio deve existir no sistema
3. ‚úÖ Usu√°rio n√£o pode j√° estar matriculado no curso
4. ‚úÖ Confirma√ß√£o antes de adicionar

### Remover Participantes
1. ‚úÖ Deve selecionar ao menos um participante
2. ‚úÖ Confirma√ß√£o antes de remover
3. ‚úÖ Lista clara dos usu√°rios a serem removidos

## üé® Melhorias de UI/UX

- Cards modernos com avatares circulares
- Hover effects suaves
- Estados de loading
- Mensagens de erro claras
- Confirma√ß√µes em duas etapas
- Design responsivo mobile-first
- Scrollbars customizadas
- Transi√ß√µes suaves

## ‚ö†Ô∏è Considera√ß√µes Importantes

### 1. Permiss√µes
- Bot√µes de gerenciamento vis√≠veis apenas para monitores
- Verificar permiss√µes tamb√©m no backend

### 2. Performance
- Carregar participantes apenas do curso atual
- Implementar debounce na busca por e-mail (opcional)
- Pagina√ß√£o se houver muitos participantes (futuro)

### 3. Seguran√ßa
- Validar permiss√µes no backend
- Sanitizar inputs
- Prevenir SQL injection (usar prepared statements)

### 4. Melhorias Futuras
- Adicionar m√∫ltiplos usu√°rios de uma vez
- Filtro/busca na lista de participantes
- Exportar lista de participantes
- Notifica√ß√µes por e-mail ao adicionar/remover

## üìû Pr√≥ximos Passos

1. **Backend**: Adicionar endpoint `bulk-delete` em `usuarioemcurso.js`
2. **Testes**: Testar todas as opera√ß√µes com dados reais
3. **Valida√ß√£o**: Garantir que todas as valida√ß√µes funcionam
4. **Deploy**: Subir para ambiente de testes

---

**Autor**: Claude (Assistant)  
**Data**: 2025  
**Sprint**: Tela de Participantes do Curso  
**Status**: ‚úÖ Frontend Completo | ‚è≥ Aguardando Integra√ß√£o Backend